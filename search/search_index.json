{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"A flexible multiplexed image segmentation pipeline based on pixel classification","text":"<p>Measuring objects and their features in images is a basic step in many quantitative tissue image analysis workflows.  This repository presents a flexible and scalable image processing pipeline tailored to highly multiplexed images facilitating the segmentation of single cells across hundreds of images.  It is based on supervised pixel classification using Ilastik to distill segmentation relevant information from multiplexed images in a semi-supervised, automated fashion.  This feature reduction step is followed by standard image segmentation using CellProfiler. The segmentation pipeline is accompanied by the <code>imcsegpipe</code> python package building up on readimc as well as customized CellProfiler modules, which facilitate the analysis of highly multiplexed images.  The pipeline is entirely build on open source tools, can be easily adapted to more specific problems and forms a basis for quantitative multiplexed tissue image analysis. For a more detailed introduction to IMC as technolgy and common data analysis steps, please refer to the IMC workflow website.</p> <p>The steinbock framework offers a dockerized version of the pipeline and extends the segmentation approach by deepcell segmentation. </p> <p>This site gives detailed explanations of the individual steps of the pipeline (see below) to generate single-cell measurements from raw imaging data. </p>"},{"location":"index.html#scope","title":"Scope","text":"<p>While we highlight the use of the pipeline with imaging mass cytometry (IMC) data, the concepts presented here can be easily applied to other highly multiplexed imaging data. Starting with <code>.ome.tiff</code> or <code>.tiff</code> files, Ilastik pixel classification, segmentation and feature extraction can be performed in a technology-agnostic way.</p>"},{"location":"index.html#critical-notes","title":"Critical notes","text":"<p>There are some points that need to be considered when using this pipeline:</p> <ol> <li>The input files need to be <code>.zip</code> folders that contain the <code>.mcd</code> files and <code>.txt</code> files (see the pre-processing section)</li> <li>It is recommended to acquire 5 or more channels to avoid potential downstream problems where images are considered to be of the RGBA type (red, green, blue, alpha).</li> </ol>"},{"location":"index.html#documentation","title":"Documentation","text":"<p>The guide displayed here gives detailed information on how to  handle IMC images. For additional information on <code>CellProfiler</code>, please refer to their manuals.</p>"},{"location":"index.html#getting-started","title":"Getting started","text":"<p>For the main part of the analysis, you will need to install Ilastik and CellProfiler. The current setup is tested with Ilastik v1.3.3post3 and CellProfiler v4.2.1.</p> <p>Furthermore, before running the analysis, you will need to setup a <code>conda</code> environment:</p> <ol> <li> <p>Install conda</p> </li> <li> <p>Clone the repository: </p> <p><code>git clone --recursive https://github.com/BodenmillerGroup/ImcSegmentationPipeline.git</code></p> </li> <li> <p>Setup the conda environment: </p> <p><code>cd ImcSegmentationPipeline</code></p> <p><code>conda env create -f environment.yml</code></p> </li> <li> <p>Configure CellProfiler to use the plugins by opening the CellProfiler GUI, selecting <code>Preferences</code> and setting the <code>CellProfiler plugins directory</code> to <code>path/to/ImcSegmentationPipeline/resources/ImcPluginsCP/plugins</code> and restart CellProfiler. Alternatively you can clone the <code>ImcPluginsCP</code> repository individually and set the path correctly in CellProfiler.</p> </li> <li> <p>Activate the environment created in 3. and start a jupyter instance</p> <p><code>conda activate imcsegpipe</code></p> <p><code>jupyter lab</code></p> </li> </ol> <p>This will automatically open a jupyter instance at <code>http://localhost:8888/lab</code> in your browser. From there, you can open the <code>scripts/imc_preprocessing.ipynb</code> notebook and start the data pre-processing.</p>"},{"location":"index.html#image-data-types","title":"Image data types","text":"<p>Throughout this pipeline, images in TIFF format are saved as unsigned 16-bit images with an intensity range of <code>0 - 65535</code>. For an overview on common image data types, please refer to the scikit-image documentation. </p>"},{"location":"index.html#pre-processing","title":"Pre-processing","text":"<p>To work with the generated imaging data, they will first be converted into OME-TIFF, multi-channel and single-channel TIFF formats that are compatible with most imaging software. A key step of the pre-processing pipeline is also the selection of channels for (i) downstream cell measurements and (ii) ilastik pixel classification.  A <code>CellProfiler</code> pipeline is used to crop smaller images for reducing the computational burden during pixel labelling.</p> <p>Please follow the pre-processing guide for more information. </p>"},{"location":"index.html#ilastik-training","title":"Ilastik training","text":"<p>Image crops are labelled based on nuclear, cytoplasmic and background pixels.  The classification probability is observed and regions with high uncertainty are re-labelled. Based on the specified labels, probabilities for each pixel belonging to the nuclear, cytoplasmic and background class are generated.  These pixel-level propabilies are used to segment images in the next step.</p> <p>Please follow the Ilastik instructions for more information.</p>"},{"location":"index.html#cellprofiler-image-segmentation","title":"CellProfiler image segmentation","text":"<p>A <code>CellProfiler</code> pipeline is used to segment cells based on the pixel probabilities generated in the previous step.  Segmentation masks are written out as single-channel TIFF images that match the input images in size, with non-zero grayscale values indicating the IDs of segmented objects (e.g. cells).</p> <p>A second <code>CellProfiler</code> pipeline is then used to extract object-specific features (e.g. mean intensity per channel and object) and to write out these features as CSV file.</p> <p>Please follow the segmentation instructions for more information.</p> <p> </p> An overview of the full segmentation pipeline"},{"location":"index.html#downstream-analysis","title":"Downstream analysis","text":"<p>For downstream analysis in <code>R</code>, please refer to the IMC Data Analysis workflow and the read_cpout function of the imcRtools package.</p>"},{"location":"index.html#contributors","title":"Contributors","text":"<p>Creator: Vito Zanotelli  Contributors: Jonas Windhager  , Nils Eling  , Milad Adibi  Maintainer: Milad Adibi</p>"},{"location":"index.html#citation","title":"Citation","text":"<p>Please cite the following paper when using this workflow in your research:</p> <p>Windhager, J., Zanotelli, V.R.T., Schulz, D. et al. An end-to-end workflow for multiplexed image processing and analysis. Nat Protoc (2023). https://doi.org/10.1038/s41596-023-00881-0</p> <pre><code>@article{Windhager2023,\n    author = {Windhager, Jonas and Zanotelli, Vito R.T. and Schulz, Daniel and Meyer, Lasse and Daniel, Michelle and Bodenmiller, Bernd and Eling, Nils},\n    title = {An end-to-end workflow for multiplexed image processing and analysis},\n    year = {2023},\n    doi = {10.1038/s41596-023-00881-0},\n    URL = {https://www.nature.com/articles/s41596-023-00881-0},\n    journal = {Nature Protocols}\n}\n</code></pre>"},{"location":"ilastik.html","title":"Ilastik pixel classification","text":"<p>In this setp, we use Ilastik to label pixels and train a random-forest classifier for semantic segmentation.  This means that each pixel will be classified as \"nuclear\", \"cytoplasmic\" or \"background\". The probability of each pixel belonging to one of these classes will be used for image segmentation (see cell segmentation).</p>"},{"location":"ilastik.html#prepare-images-for-pixel-classification","title":"Prepare images for pixel classification","text":"<p>In the first step, the <code>resources/pipelines/1_prepare_ilastik.cppipe</code> CellProfiler pipeline will be used to prepare images for labelling and classification. To get started, you will need to open CellProfiler and import the <code>1_prepare_ilastik.cppipe</code> pipeline.</p> <ol> <li>Drop the <code>analysis/ilastik</code> folder into the window under <code>Images</code> </li> <li>In <code>Output Settings</code> set the <code>analysis/crops</code> folder as <code>Default Output Folder</code> </li> </ol> <p>The pipeline will read in all multi-channel images from the <code>analysis/ilastik</code> folder containing the suffix <code>_ilastik</code>.  The following steps are part of the pipeline:</p> <ol> <li>The average intensity across all channels is computed and multiplied by 100. This will later serve as visual help to find background areas during Ilastik pixel labelling.  </li> <li>The average is clipped to 0 and 1 (after uint16 rescaling) to avoid out-of-range errors.  </li> <li>The average channel is added to the Ilastik stack as first channel.  </li> <li>The pixels of the Ilastik stack are upscaled by a factor of 2. This will increase the number of pixels in the image 4 fold and facilitates pixel labelling.  </li> <li>The Ilastik stack is cropped into smaller fields of view. By default these are 500x500 pixel crops but for large datasets smaller image crops will suffice.  </li> <li>The upscaled Ilastik stack is saved in <code>.h5</code> format into the <code>analysis/ilastik</code> folder and the cropped images are saved into the <code>analysis/crops</code> folder.  </li> </ol>"},{"location":"ilastik.html#train-and-apply-a-pixel-classifier","title":"Train and apply a pixel classifier","text":"<p>Here, we will open Ilastik and perform pixel labelling as well as pixel classification. For a detailed overview on Ilastik pixel classification refer to the manual. After using the <code>scripts/download_examples.ipynb</code> script, you can find the <code>IMCWorkflwo.ilp</code> Ilastik project in the root directory of the repository. This project contains a classifier pre-trained on the example IMC data.</p> <p>To create a new classifier, please follow the steps below:</p> <ol> <li>Create a new  <code>Pixel Classification</code> project.</li> <li>Under <code>Input Data</code> press <code>Add New...</code> &gt; <code>Add separate Image(s)</code> and select all <code>.h5</code> files in the <code>analysis/crops</code> folder.  </li> <li><code>Feature Selection</code>: we generally recommend to select all features with \u03c3 &gt;= 1  </li> <li><code>Training</code>: The following steps need to be performed to train the classifier<ul> <li>Create and rename 3 labels: Label 1 - \"nucleus\"; Label 2 - \"cytoplasm\"; Label 3 - \"background\"</li> <li>Observe the different channels: the last entry <code>Raw Input</code> in the box on the bottom left indicates the current channel. You can change the channel by using the buttons on the left and the channel order is stored in the <code>_ilastik.csv</code> files in the <code>analysis/ilastik</code> folder.</li> <li>Adjust the contrast of the channel: This can be done by selecting the <code>Window Leveling</code> tool under <code>Add Label</code>. Holding the left mouse button and moving the mouse changes the visual appearance of the channel. Clicking the right mouse button resets the channel intensities.</li> <li>Label the pixels: Select the <code>Brush Cursor</code> tool and draw lines on the image. You can get an orientation by looking at the labels in the <code>IMCWorkflow.ilp</code> project. Switch between labels to label pixels as \"nucleus\", \"cytoplasm\" and \"background\". Label pixel in an opiniated fashion: If you see in the nucleus channel that two nuclei are stuck together but have a faint dip in intensity in between, label this dip as \"cytoplasm\". Encircle nuclei with \"cytoplasm\".  </li> <li>After labelling a few images, click on <code>Live Update</code>. This will show the current prediction for the three classes. Labelling while keeping <code>Live Update</code> enabled slows down the process.</li> <li>Observe the uncertainties by clicking the \"eye\" next to <code>Uncertainty</code>. This will show you regions in which classification uncertainty is highest. These regions need to be re-labelled. A well trained classifier has low uncertainty within class regions (e.g., nuclei) and high uncertainty at class borders (e.g., between nuclei and cytoplasm).</li> </ul> </li> <li><code>Prediction Export</code>: Once the classifier is well trained, perform the following steps to export predictions:<ul> <li><code>Source</code>: <code>Probabilities</code></li> <li><code>Choose Export Image Settings</code>: <ul> <li><code>Convert to Data Type</code>: unsigned 16-bit</li> <li>check <code>Renormalize</code></li> <li><code>Format</code>: tiff</li> </ul> </li> </ul> </li> <li><code>Batch Processing</code>: In this step the pixel probabilities of all images will be generated.<ul> <li><code>Select Raw Data Files...</code>: Select all <code>_s2.h5</code> files in the <code>analysis/ilastik</code> folder.</li> <li>Click on <code>Process all files</code></li> </ul> </li> </ol> <p>The last step will generate 3 channel RGB images containing the pixel probabilities for image segmentation (see cell segmentation).</p>"},{"location":"ilastik.html#output","title":"Output","text":"<p>The following outputs have been generated during this step of the pipeline:</p> <ul> <li><code>analysis/crops</code>: this folder contains the image crops of the ilastik stack in <code>.h5</code> format for ilastik training.</li> <li><code>analysis/ilastik/..._s2.h5</code>: upscaled ilastik stack in <code>.h5</code> format for pixel classification.  </li> <li><code>analysis/ilastik/..._s2_Probabilities.tiff</code>: 3 channel RGB images containg the pixel probabilities for segmentation.</li> </ul>"},{"location":"measurement.html","title":"Measurement of object features","text":"<p>After image segmentation to identify individual objects/cells, the next CellProfiler pipeline will measure single-object and single-image features. Set up the pipeline by importing the <code>resources/pipelines/3_measure_mask.cppipe</code> pipeline into CellProfiler and perform following steps:</p> <ol> <li>Drag and drop the <code>analysis/cpout</code> folder into the <code>Images</code> window.</li> <li>In the <code>Output Settings</code> adjust the <code>Default Output Folder</code> to <code>analysis/cpout</code>.</li> <li>In the <code>Output Settings</code> adjust the <code>Default Input Folder</code> to <code>analysis/cpinp</code>.</li> </ol> <p>The following steps are part of the pipeline:</p> <ol> <li><code>Metadata</code>: Metadata from the images (<code>acname</code> and <code>acid</code>) are matched and merged with image metadata generated during pre-processing (contained in the <code>analysis/cpinp/acquisition_metadata.csv</code> file).</li> <li><code>NamesAndTypes</code>: The multi-channel images (stored in <code>analysis/cpout/images</code>), segmentation masks (stored in <code>analysis/cpout/images</code>) and the pixel probabilities (stored in <code>analysis/cpout/probabilities</code>) are read in and matched via their acquisition name (<code>acname</code>) and acquisition ID (<code>acid</code>).</li> <li>Segmentation masks are read in as 16-bit grayscale images and are converted to objects while keeping their original labels in place.</li> <li>For each cell its neighbors are detected by expanding the mask by a defined distance.</li> <li>The full stack channel intensities per object/cell are extracted. Make sure to adjust the channel number to your dataset. You can observe the total channel number in the <code>analysis/cpout/images/..._full.csv</code> files.</li> <li>The probability stack channel intensities per object/cell are extracted. </li> <li>The size and shape features per object/cell are extracted.</li> <li>The full stack channel intensities per image are extracted. Make sure to adjust the channel number to your dataset. You can observe the total channel number in the <code>analysis/cpout/images/..._full.csv</code> files.</li> <li>The probability stack channel intensities per image are extracted. </li> <li>The object/cell, image and experiment data is saved as <code>.csv</code> files. The <code>cell.csv</code> file contains single-cell features including intensity and morphological features. Here are a few notes to the  export: <ul> <li>You can select a subset of features by setting <code>Select the measurements to export</code> to <code>Yes</code>. We usually work with the <code>MeanIntensity</code> cell measurements.</li> <li>the intensity values are all scaled by a scaling factor corresponding to the bit depth. This scaling factor can be found in the <code>Image.csv</code> file in the <code>Scaling_FullStack</code> column. For 16-bit unsigned integer images (<code>uint16</code>) as we use them here the values are divided by <code>2**16 - 1 = 65535</code>.</li> <li>The channel identifier <code>_c1</code>, <code>_c2</code>, <code>_c3</code>, ... corresponds to the position in the <code>..._full.csv</code> files found in the <code>analysis/cpout/images</code> folder.</li> <li>The original acquisition description, acquisition frequencies, acquisition name, etc. can be found in the <code>Image.csv</code> output file as <code>Metdata_...</code> columns.</li> </ul> </li> <li>The cell-cell neighbor information detected in step 4 are exported as <code>.csv</code> file containing an edge list.</li> <li>The final output are <code>.csv</code> files that contain additional metadata per measured feature. For the cell features the following information is written out: <code>category</code> (e.g. Intensity), <code>image_name</code> (e.g. FullStack), <code>object_name</code>, <code>feature_name</code> (e.g. MeanIntensity), <code>channel</code> (e.g. 1), <code>parameters</code>, <code>channel_id</code> (e.g. Ir191) and <code>data_type</code> (e.g. float)</li> </ol>"},{"location":"measurement.html#output","title":"Output","text":"<p>After feature measurment the following files have been generated:</p> <ul> <li><code>analysis/cpout/cell.csv</code>: contains features (columns) for each cell (rows).</li> <li><code>analysis/cpout/Experiment.csv</code>: contains metadata related to the CellProfiler version used.</li> <li><code>analysis/cpout/Image.csv</code>: contains image-level measurements (e.g. channel intensities) and acquisition metadata. </li> <li><code>analysis/cpout/Object relationships.csv</code>: contains neighbor information in form of an edge list between cells.</li> <li><code>analysis/cpout/var_cell.csv</code>: contains feature metadata for all single-cell features.</li> <li><code>analysis/cpout/var_Image.csv</code>: contains feature metadata for all image features.</li> </ul>"},{"location":"output.html","title":"Final output files","text":"<p>The IMC Segmentation Pipeline produces a number of output files during pre-processing, ilastik pixel classification, segmentation and measurement.  They are listed below:</p> <pre><code>analysis\n|\n\u251c\u2500\u2500 cpinp \n    \u251c\u2500\u2500 acquisition_metadata.csv \n    \u251c\u2500\u2500 full_channelmeta.csv\n    \u251c\u2500\u2500 probab_channelmeta_manual.csv\n\u251c\u2500\u2500 cpout      \n    \u251c\u2500\u2500 images\n        \u251c\u2500\u2500 {XYZ}_s0_a1_ac_full.tiff\n        \u251c\u2500\u2500 {XYZ}_s0_a1_ac_full.csv\n        \u251c\u2500\u2500 ...\n    \u251c\u2500\u2500 masks\n        \u251c\u2500\u2500 {XYZ}_s0_a1_ac_ilastik_s2_Probabilities_mask.tiff\n        \u251c\u2500\u2500 ...\n    \u251c\u2500\u2500 probabilities\n        \u251c\u2500\u2500 {XYZ}_s0_a1_ac_ilastik_s2_Probabilities_s1.tiff\n        \u251c\u2500\u2500 ...\n    \u251c\u2500\u2500 cell.csv\n    \u251c\u2500\u2500 Experiment.csv\n    \u251c\u2500\u2500 Image.csv\n    \u251c\u2500\u2500 Object relationships.csv\n    \u251c\u2500\u2500 panel.csv\n    \u251c\u2500\u2500 var_cell.csv\n    \u251c\u2500\u2500 var_Image.csv\n\u251c\u2500\u2500 crops \n    \u251c\u2500\u2500 {XYZ}_s0_a1_ac_ilastik_x{X}_y{Y}_w{W}_h{H}.tiff\n    \u251c\u2500\u2500 ...\n\u251c\u2500\u2500 histocat\n    \u251c\u2500\u2500 {XYZ}_s0_a1_ac\n        \u251c\u2500\u2500 {channel_label}_{channel_name}.tiff\n        \u251c\u2500\u2500 ...\n    \u251c\u2500\u2500 ...\n\u251c\u2500\u2500 ilastik\n    \u251c\u2500\u2500 {XYZ}_s0_a1_ac_ilastik.tiff\n    \u251c\u2500\u2500 {XYZ}_s0_a1_ac_ilastik.csv\n    \u251c\u2500\u2500 {XYZ}_s0_a1_ac_ilastik_s2.h5\n    \u251c\u2500\u2500 {XYZ}_s0_a1_ac_ilastik_s2_Probabilities.tiff\n    \u251c\u2500\u2500 ...\n\u251c\u2500\u2500 ometiff\n    \u251c\u2500\u2500 {XYZ}\n        \u251c\u2500\u2500 {XYZ}_s0_a1_ac.ome.tiff\n        \u251c\u2500\u2500 {XYZ}_s0_a1_ac.ome.csv\n        \u251c\u2500\u2500 ...\n        \u251c\u2500\u2500 {XYZ}_s0_p1_pano.png\n        \u251c\u2500\u2500 ...\n        \u251c\u2500\u2500 {XYZ}_s0_slide.png\n        \u251c\u2500\u2500 {XYZ}_schema.xml\n</code></pre> <p>Here <code>XYZ</code> indicates the sample name.</p>"},{"location":"output.html#the-main-output-folder","title":"The main output folder","text":"<p>The <code>cpout</code> folder contains all relevant output files:</p> <ul> <li><code>cpout/images</code>: contains the hot pixel filtered full stacks for analysis as well as <code>.csv</code> files indicating the channel order. </li> <li><code>cpout/masks</code>: contains single-channel segmentation masks in 16-bit <code>.tiff</code> format. Segmentation masks are single-channel images that match the input images in size, with non-zero grayscale values indicating the IDs of segmented objects. </li> <li><code>cpout/probabilities</code>: contains 3 channel images in 16-bit <code>.tiff</code> format representing the downscaled pixel probabilities after Ilastik pixel classification.</li> <li><code>cpout/cell.csv</code>: contains features (columns) for each cell (rows).</li> <li><code>cpout/Experiment.csv</code>: contains metadata related to the CellProfiler version used.</li> <li><code>cpout/Image.csv</code>: contains image-level measurements (e.g. channel intensities) and acquisition metadata. </li> <li><code>cpout/Object relationships.csv</code>: contains neighbor information in form of an edge list between cells.</li> <li><code>cpout/panel.csv</code>: a copy of the panel file used for the experiment.</li> <li><code>cpout/var_cell.csv</code>: contains feature metadata for all single-cell features.</li> <li><code>cpout/var_Image.csv</code>: contains feature metadata for all image features.</li> </ul>"},{"location":"output.html#the-cellprofiler-input-folder","title":"The CellProfiler input folder","text":"<p>The <code>cpinp</code> folder contains metadata files for CellProfiler input:</p> <ul> <li><code>cpinp/acquisition_metadata.csv</code>: containing acquisition metadata.</li> <li><code>cpinp/full_channelmeta.csv</code>: containing full stack channel metadata.</li> <li><code>cpinp/probab_channelmeta_manual.csv</code>: containing probability stack channel metadata.</li> </ul>"},{"location":"output.html#ilastik-folder","title":"Ilastik folder","text":"<p>The following folders contain files for Ilastik pixel classification:</p> <ul> <li><code>analysis/ilastik</code>: contains the Ilastik stacks (<code>{XYZ}_s0_a1_ac_ilastik.tiff</code>), matched <code>.csv</code> files indicating the correct channel order (<code>{XYZ}_s0_a1_ac_ilastik.csv</code>), the upscaled ilastik stacks in <code>.h5</code> format (<code>XYZ}_s0_a1_ac_ilastik_s2.h5</code>) and upscaled pixel probabilities (<code>{XYZ}_s0_a1_ac_ilastik_s2_Probabilities.tiff</code>).</li> <li><code>analysis/crops</code>: this folder contains the image crops of the Ilastik stack in <code>.h5</code> format for Ilastik training.</li> </ul>"},{"location":"output.html#image-data-folders","title":"Image data folders","text":"<p>The following folders contain data in different formats for use with other software or histoCAT.</p> <ul> <li><code>analysis/ometiff</code>: contains individual folders (one per sample) of which each contains multiple <code>.ome.tiff</code> files (one per acquisition).  </li> <li><code>analysis/histocat</code>: contains individual folders (one per acquisition) of which each contains multiple single-channel <code>.tiff</code> files for upload to histoCAT.  </li> </ul>"},{"location":"prepro.html","title":"Pre-processing","text":"<p>During the first step of the segmentation pipeline, raw data need to be converted to file formats that can be read-in by external software (<code>Fiji</code>, <code>R</code>, <code>python</code>, <code>histoCAT</code>).</p> <p>Please follow the preprocessing.ipynb script to pre-process the raw data. To get started, please refer to the instructions here.</p>"},{"location":"prepro.html#input","title":"Input","text":"<p>The zipped .mcd files</p> <p>The Hyperion Imaging System produces vendor controlled <code>.mcd</code> and <code>.txt</code> files in the following folder structure:</p> <pre><code>\u251c\u2500\u2500 {XYZ}_ROI_001_1.txt\n\u251c\u2500\u2500 {XYZ}_ROI_002_2.txt\n\u251c\u2500\u2500 {XYZ}_ROI_003_3.txt\n\u251c\u2500\u2500 {XYZ}.mcd\n</code></pre> <p>where <code>XYZ</code> defines the filename, <code>ROI_001</code>, <code>ROI_002</code>, <code>ROI_003</code> are names (description) for the selected regions of interest (ROI) and <code>1, 2, 3</code> indicate the acquistion identifiers.  The ROI description entry can be specified in the Fluidigm software when selecting ROIs. The <code>.mcd</code> file contains the raw imaging data of all acquired ROIs while each <code>.txt</code> file contains data of a single ROI. To enforce a consistent naming scheme and to bundle all metadata, we recommend to zip the folder and specify the location of all <code>.zip</code> files for preprocessing. Each <code>.zip</code> file should only contain data from a single <code>.mcd</code> file and the name of the <code>.zip</code> file should match the name  of the <code>.mcd</code> file.</p> <p>The panel file</p> <p>The panel file (in <code>.csv</code> format) specifies the type of antibodies that were used in the experiment and all additional channels (e.g. metals used for counterstaining<sup>1</sup>) that you want to include in downstream processing. Example entries to the panel file can look like this:</p> Metal Tag Target full ilastik Dy161 Ecad 1 1 Dy162 CD45 1 0 Er166 CD3 1 1 Ru100 Counterstain 1 0 <p>Usually there are more columns but the important ones in this case are <code>Metal Tag</code>, <code>full</code> and <code>ilastik</code>. The <code>1</code> in the <code>full</code> column specifies channels that should be written out to an image stack that will be later on used to extract features (also refered to as \"full stack\").  Here, please specify all channels as <code>1</code> that you want to have included in the analysis. The <code>1</code> in the <code>ilastik</code> column indicates channels that will be used for Ilastik pixel classification therefore being used for image segmentation (also refered to as \"Ilastik stack\"). During the pre-processing steps, you will need to specify the name of the panel column that contains the metal isotopes, the name of the column that contains the <code>1</code> or <code>0</code> entries for the channels to be analysed and the name of the column that indicates the channels used for Ilastik training as seen above.</p> <p>Naming conventions</p> <p>When going through the preprocessing script, you will notice the specification of the <code>_full</code> and <code>_ilastik</code> suffix indicating the two image stacks mentioned above.</p>"},{"location":"prepro.html#example-data","title":"Example data","text":"<p>We provide raw IMC example data at zenodo.org/record/5949116. This dataset contains 4 <code>.zip</code> archives each of which holds one <code>.mcd</code> and multiple <code>.txt</code> files. The data was acquired as part of the Integrated iMMUnoprofiling of large adaptive CANcer patient cohorts (IMMUcan) project immucan.eu using the Hyperion imaging system. Data of 4 patients with different cancer types are provided. To download the raw data together with the panel file, sample metadata and a pre-trained Ilastik classifier, please follow the download script.</p>"},{"location":"prepro.html#conversion-fom-mcd-to-ometiff-files","title":"Conversion fom .mcd to .ome.tiff files","text":"<p>In the first step of the pipeline, raw <code>.mcd</code> files are converted into <code>.ome.tiff</code> files<sup>2</sup>. This serves the purpose to allow vendor independent downstream analysis and visualization of the images. For in-depth information of the <code>.ome.tiff</code> file format see here.  Each <code>.mcd</code> file can contain multiple acquisitions. This means that multiple multi-channel <code>.ome.tiff</code> files per <code>.mcd</code> file are produced.  The <code>Fluor</code> and <code>Name</code> entries of each channel are set. Here <code>Name</code> contains the actual name of the antibody as defined in the panel file and <code>Fluor</code> contains the metal tag of the antibody. For IMC data, the metal tag is defined as: <code>(IsotopeShortname)(Mass)</code>, e.g. Ir191 for Iridium isotope 191.</p> <p>To perform this conversion, we use the <code>extract_mcd_file</code> function of the internal <code>imcsegpipe</code> python package. It uses the readimc python package to read <code>.mcd</code> files and the xtiff python package to write the <code>.ome.tiff</code> files.</p> <p>The <code>ometiff</code> output folder for each sample has the following form:</p> <pre><code>\u251c\u2500\u2500 {XYZ}_s0_a1_ac.ome.tiff\n\u251c\u2500\u2500 {XYZ}_s0_a2_ac.ome.tiff\n\u251c\u2500\u2500 {XYZ}_s0_a3_ac.ome.tiff\n\u251c\u2500\u2500 {XYZ}_s0_a1_ac.ome.csv\n\u251c\u2500\u2500 {XYZ}_s0_a2_ac.ome.csv\n\u251c\u2500\u2500 {XYZ}_s0_a3_ac.ome.csv\n\u251c\u2500\u2500 {XYZ}_s0_p1_pano.png\n\u251c\u2500\u2500 {XYZ}_s0_slide.png\n\u251c\u2500\u2500 {XYZ}_schema.xml\n</code></pre> <p>Next to the individual <code>.ome.tiff</code> files (one per acquisition), <code>.csv</code> files are generated that contain the channel name (the metal isotope) and the channel label (the name of the antibody) in the correct channel order. The <code>_pano.png</code> files contain brighfield panorama acquisitions of the sample where the slide overview is stored as <code>_p1_pano.png</code>. The <code>_schema.xml</code> file contains the internal metadata of the <code>.mcd</code> file in <code>.xml</code> format.</p> <p>The <code>.mcd</code> to <code>.ome.tiff</code> conversion step additionally generates the <code>analysis/cpinp/acquisition_metadata.csv</code> file that stores per acquisition metadata for later use in CellProfiler.</p>"},{"location":"prepro.html#conversion-from-ometiff-to-single-channel-tiffs","title":"Conversion from .ome.tiff to single-channel tiffs","text":"<p>In the next pre-processing step, <code>.ome.tiff</code> files are converted to a format that is supported by the histoCAT software<sup>3</sup>. To load images into <code>histoCAT</code>, they need to be stored as unsigned 16-bit or unsigned 32-bit single-channel <code>.tiff</code> files.  For each acquisition (each <code>.ome.tiff</code> file), the <code>export_to_histocat</code> converter function exports one folder containing all measured channels as single-channel 32-bit <code>.tiff</code> files. The naming convention of these <code>.tiff</code> files is <code>Name_Fluor</code>, where <code>Name</code> is the name of the antibody (or the metal if no name is available) and <code>Fluor</code> is the name of the metal isotope. For full documentation on the <code>histoCAT</code> format, please follow the manual. Part of a single histoCAT folder will look as follows:</p> <pre><code>\u251c\u2500\u2500 131Xe_Xe131.tiff\n\u251c\u2500\u2500 Beta-2M-1855((2962))Nd148_Nd148.tiff\n\u251c\u2500\u2500 ...\n</code></pre>"},{"location":"prepro.html#conversion-from-ometiff-to-multi-channel-tiffs","title":"Conversion from .ome.tiff to multi-channel tiffs","text":"<p>For downstream analysis and Ilastik pixel classification, the <code>.ome.tiff</code> files are converted into two multi-channel image stacks in TIFF format:</p> <p>1. Full stack: The full stack contains all channels specified by the \"1\" entries in the <code>full</code> column of the panel file. This stack will be later used to measure cell-specific expression features of the selected channels.</p> <p>2. Ilastik stack: The Ilastik stack contains all channels specified by the \"1\" entries in the <code>ilastik</code> column of the panel file. This stack will be used to perform the ilastik training to generate cell, cytoplasm and background pixel probabilities (see Ilastik training).</p> <p>Additional image stacks can be generated by adapting the panel file and specifying the suffix of the file name. </p> <p>Hot pixel filtering: Each pixel intensity is compared against the maximum intensity of the 3x3 neighboring pixels. If the difference is larger than a specified threshold, the pixel intensity is clipped to the maximum intensity in the 3x3 neighborhood. Setting <code>hpf=None</code> disables hot pixel filtering in this conversion step.</p> <p>By default the hot pixel filtered full stack is written out to the <code>analysis/cpout/images</code> folder and the hot pixel filtered Ilastik stack is written out to the <code>analysis/ilastik</code> folder.</p> <p>The <code>analysis/ilastik</code> folder contains files such as:</p> <pre><code>\u251c\u2500\u2500 {XYZ}_s0_a1_ac_ilastik.tiff\n\u251c\u2500\u2500 {XYZ}_s0_a1_ac_ilastik.csv\n\u251c\u2500\u2500 ...\n</code></pre> <p>The <code>analysis/cpout/images</code> folder contains following files:</p> <pre><code>\n\u251c\u2500\u2500 {XYZ}_s0_a1_ac_full.tiff\n\u251c\u2500\u2500 {XYZ}_s0_a1_ac_full.csv\n\u251c\u2500\u2500 ...\n</code></pre> <p>The matching <code>.csv</code> files contain the channel names (metals) in the correct channel order.</p>"},{"location":"prepro.html#export-of-acquisition-specific-metadata","title":"Export of acquisition-specific metadata","text":"<p>In the final step of the pre-processing pipeline, a <code>.csv</code> file containing the full stack channel names (metal isotopes) and a <code>.csv</code> file containing the channel names of the images storing pixel probabilities (see Ilastik training) are written out to the <code>analysis/cpinp/</code> folder.</p>"},{"location":"prepro.html#output","title":"Output","text":"<p>After image pre-processing the following files have been generated:</p> <ul> <li><code>analysis/ometiff</code>: contains individual folders (one per sample) of which each contains multiple <code>.ome.tiff</code> files (one per acquisition).  </li> <li><code>analysis/histocat</code>: contains individual folders (one per acquisition) of which each contains multiple single-channel <code>.tiff</code> files for upload to histoCAT.  </li> <li><code>analysis/ilastik</code>: contains the ilastik stacks for pixel classification as well as <code>.csv</code> files indicating the channel order.  </li> <li><code>analysis/cpout/images</code>: contains the full stacks for analysis as well as <code>.csv</code> files indicating the channel order.  </li> <li><code>analysis/cpout/panel.csv</code>: the panel file was copied into the final output folder.  </li> <li><code>analysis/cpinp</code>: containing the <code>acquisition_metadata.csv</code>, <code>full_channelmeta.csv</code>, and <code>probab_channelmeta_manual.csv</code> files containing acquisition and channel metadata </li> </ul> <ol> <li> <p>Catena R. et al. (2018) Ruthenium counterstaining for imaging mass cytometry. The Journal of Pathology 244(4), pages 479-484.\u00a0\u21a9</p> </li> <li> <p>Goldberg I.G. et al. (2005) The open microscopy environment (OME) data model and XML file: open tools for informatics and quantitative analysis in biological imaging. Genome Biology 6(5), R47.\u00a0\u21a9</p> </li> <li> <p>Shapiro D. et al. (2017) histoCAT: analysis of cell phenotypes and interactions in multiplex image cytometry data. Nature Methods 14, pages 873\u2013876.\u00a0\u21a9</p> </li> </ol>"},{"location":"segmentation.html","title":"Cell segmentation","text":"<p>To segment individual objects (here these are cells) in images, the following CellProfiler pipeline reads in pixel probabilities (generated in Ilastik pixel classification) for segmentation. Set up the pipeline by importing the <code>resources/pipelines/2_segment_ilastik.cppipe</code> pipeline into CellProfiler and perform following steps:</p> <ol> <li>Drag and drop the <code>analysis/ilastik</code> folder into the <code>Images</code> window.</li> <li>In the <code>Output Settings</code> adjust the <code>Default Output Folder</code> to <code>analysis/cpout</code>.  </li> </ol> <p>The following steps are part of the pipeline:</p> <ol> <li>The files ending with <code>_Probabilities.tiff</code> are read in as part of the <code>NamesAndTypes</code> module.</li> <li>The images containing pixel probabilities are downscaled by a factor of 0.5 to match the initial image dimensions.</li> <li>In <code>ColorToGray</code> the 3 channel probability images are split into their individual channels: channel 1 - nucleus; channel 2 - cytoplasm; channel 3 - background.  </li> <li>The nulcear and cytoplasmic channels are summed up to form a single channel indicating the full cell probability.  </li> <li>The nuclear probabilities are smoothed using a gaussian filter. This step can be adjusted or removed to increase segmentation success. </li> <li>The <code>IdentifyPrimaryObjects</code> module is crucial to correctly identifying nuclei. Use the test mode and enable the \"eye\" icon next to the module to observe if nuclei are correctly segmented. The advanced settings can be adjusted to improve segmentation.  </li> <li>The <code>MeasureObjectSizeShape</code> module measures the size of the nuclei and the <code>FilterObjects</code> module filters nuclei below a specified threshold. </li> <li>The <code>IdentifySecondaryObjects</code> module expands from the identified nuclei to the border of the full cell probability generated in step 3 or until touching the neighboring cell. </li> <li>The segmentation masks are converted to 16-bit images. </li> <li>The segmentation masks are written out as 16-bit, single-channel <code>.tiff</code> images to the <code>analysis/cpout/masks</code> folder.</li> <li>The downscaled pixel probability images are written out as 16-bit, 3 channel <code>.tiff</code> images to the <code>analysis/cpout/probabilities</code> folder.</li> </ol>"},{"location":"segmentation.html#output","title":"Output","text":"<p>After image segmentation the following files have been generated:</p> <ul> <li><code>analysis/cpout/masks</code>: contains single-channel segmentation masks in 16-bit <code>.tiff</code> format. Segmentation masks are single-channel images that match the input images in size, with non-zero grayscale values indicating the IDs of segmented objects.</li> <li><code>analysis/cpout/probabilities</code>: contains 3 channel images in 16-bit <code>.tiff</code> format representing the downscaled pixel probabilities after Ilastik pixel classification.</li> </ul>"}]}