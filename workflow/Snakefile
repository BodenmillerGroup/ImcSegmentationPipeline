import urllib.request
import pathlib
from scripts import helpers as hpr
from snakemake.utils import validate

# Cellprofiler/Ilastik rules
include: 'rules/cellprofiler.smk'
include: 'rules/ilastik.smk'

# Read Configuration
configfile: 'config/config_pipeline.yml'
validate(config, "schemas/config_pipeline.schema.yml")

# Extract variables from configuration
## Input/output
input_data_folders = config['input']['folders']
input_file_regexp = config['input']['file_regexp']
file_path_cell_classifier = config['varia']['fn_cell_classifier']

# Optional example data folder
fol_example = pathlib.Path(input_data_folders[0])

## Panel
config_panel = config['panel']
csv_panel = config['panel']['path']
csv_panel_metal = config_panel['col_metal']
config_stacks = config_panel['stacks']
csv_panel_ilastik = config_stacks['ilastik']['col_bool']
csv_panel_full = config_stacks['full']['col_bool']

## Ilastik run config
config_ilastik = config['ilastik']
ilastik_container = config_ilastik['container']
ilastik_threads = config_ilastik['threads']
ilastik_mem_mb = config_ilastik['mem_mb']

# varia
# Cellprofiler default config
cellprofiler_container = config['cellprofiler']['container']
cp_plugins = config['cellprofiler']['plugins']

imctools_container = config['varia']['imctools_container']
# Define hardcoded variables
## Define basic folder structrue
fol_path_base = pathlib.Path('results')
fol_path_analysis = fol_path_base / 'tiffs'
fol_path_full = fol_path_analysis / 'stack_full'
fol_path_ilastik = fol_path_analysis / 'stack_ilastik'
fol_path_ilastik_h5 = fol_path_analysis / 'ilastik_h5'
fol_path_probabilities = fol_path_analysis / 'probabilities'
fol_path_cellmasks = fol_path_analysis / 'cellmasks'
fol_path_ome = fol_path_base / 'ometiff'
fol_path_tmp = fol_path_base / 'tmp'
fol_path_cp = fol_path_base / 'cpout'
fol_path_histocat = fol_path_base / 'histocat'
fol_path_uncertainty = fol_path_base / 'uncertainty'
fol_path_crop = fol_path_base / 'ilastik_training_data'
fol_path_classifiers = fol_path_base / 'classifiers'
fol_pat_stack = fol_path_analysis / 'stack_{stack}'
fol_path_cp_masks = fol_path_cp / 'masks'

## Define Output files
file_path_image = fol_path_cp / 'Image.csv'
file_path_cell = fol_path_cp / 'cell.csv'
file_path_experiment = fol_path_cp / 'Experiment.csv'
file_path_object_rel = fol_path_cp / 'Object relationships.csv'
file_path_cell_class_ut = fol_path_classifiers / 'cell_untrained.ilp'
file_path_acmeta = fol_path_cp / 'acquisition_metadata.csv'
# Identify a dictionary of input folders/zips containing .mcd files to process
dict_zip_fns = {fn.stem: fn for fn in hpr.get_filenames_by_re(input_data_folders, input_file_regexp)}
# Produce a list of all cellprofiler output files
cp_measurements_output = [file_path_image, file_path_cell, file_path_experiment, file_path_object_rel]


## Define suffixes
suffix_full = '_full'
suffix_ilastik = '_ilastik'
suffix_scale = '_s2'
suffix_mask = '_mask'
suffix_probablities = '_Probabilities'
suffix_tiff = '.tiff'
suffix_csv = '.csv'
suffix_h5 = '.h5'
suffix_done = '.done'
suffix_crop = '_{crop, x[0-9]+_y[0-9]+_w[0-9]+_h[0-9]+}'

## Define derived file patterns
pat_file_path_zip = fol_path_base / 'zips' / ('{zipfol}' + '.zip')
pat_file_path_mcdparse_done = fol_path_base / 'zips' / ('{zipfol}' + suffix_done)
file_path_all_mcd_converted = fol_path_base / 'all_mcd_converted.done'

## Init dirs
fol_path_ome.mkdir(parents=True, exist_ok=True)

# Configuration for cellprofiler pipeline steps
# (Please look at rules/cellprofiler.smk for the documentation of this structure)
config_dict_cp = {
    'prepilastik': {
        'run_size': 10,
        'plugins': cp_plugins,
        'pipeline': 'resources/cp4_pipelines/1_prepare_ilastik.cppipe',
        'input_files': [fol_path_ilastik],
        'output_patterns': {'scaled': directory(fol_path_ilastik_h5),
                            'crops': directory(fol_path_crop)}
    },
    'segmasks': {
        'run_size': 10,
        'plugins': cp_plugins,
        'pipeline': 'resources/cp4_pipelines/2_segment_ilastik.cppipe',
        'input_files': [fol_path_probabilities],
        'output_patterns': {'.': directory(fol_path_cellmasks)}
    },
    'measuremasks': {
        'run_size': 5,
        'plugins': cp_plugins,
        'pipeline': 'resources/cp4_pipelines/3_measure_mask_basic.cppipe',
        'input_files': [fol_path_cellmasks, fol_path_full, fol_path_probabilities],
        'output_patterns': {'.': cp_measurements_output,
                            'cellmasks': directory(fol_path_cp_masks)}
    }
}

# Configuration for Ilastik steps
# (Please look at rules/cellprofiler.smk for the documentation of this structure)
config_dict_ilastik = {
    'cell':
        {'project': file_path_cell_classifier,
         'run_size': 10,
         'output_format': 'tiff',
         'output_filename': f'{{nickname}}{suffix_probablities}{suffix_tiff}',
         'export_source': 'Probabilities',
         'export_dtype': 'uint16',
         'pipeline_result_drange': '"(0.0, 1.0)"',
         'input_files': fol_path_ilastik_h5,
         'output_pattern': directory(fol_path_probabilities)
         }
}
# Target rules
rule all:
    input: fol_path_ome, fol_path_cp_masks, cp_measurements_output

rule cell_probabilities:
    input: fol_path_probabilities

rule prep_cell_classifier:
    input: fol_path_crop

rule files_ilastik_scaled:
    input: fol_path_ilastik_h5

rule files_ilastik:
    input: fol_path_ilastik

rule files_ome:
    input: fol_path_ome


# MCD to ome conversion
def get_zip_fn(wildcards):
    return dict_zip_fns[wildcards.zipfol]

rule retrieve_zip:
    output: pat_file_path_zip
    params:
          fn = get_zip_fn
    shell:
         'cp {params.fn} {output[0]}'

# MCD to ome conversion
rule mcdfolder2imcfolder:
    input:
         fn_zip = pat_file_path_zip
    output: touch(pat_file_path_mcdparse_done)
    threads: 1
    params:
          fol_ome = fol_path_ome
    container:
          imctools_container
    script:
          'scripts/convert_imcfolder.py'

checkpoint all_mcd_converted:
    input: expand(str(pat_file_path_mcdparse_done), zipfol=dict_zip_fns.keys())
    output:
          touch(file_path_all_mcd_converted)


# OME to analysis tiff conversion
rule ome2analysis:
    input:
         fol_ome = fol_path_ome,
         panel = csv_panel,
         done = file_path_all_mcd_converted
    output:
          directory(fol_pat_stack)
    container:
             imctools_container
    params:
          column_used = lambda wildcards: config_stacks[wildcards.stack][
              'col_bool'],
          column_metal = csv_panel_metal,
          suffix = '{stack}',
          min_imgsize = lambda wildcards: config_stacks[wildcards.stack][
              'min_image_size']
    threads: 32
    script:
          'scripts/imc2analysis.py'

# rule
rule exportacmeta:
    input:
        fol_path_ome = fol_path_ome,
        all_converted = file_path_all_mcd_converted
    output: file_path_acmeta
    params:
        fol_path_out = str(file_path_acmeta.parent)
    container:
        imctools_container
    shell:
        ' imctools export-acquisition-csv {input.fol_path_ome} {params.fol_path_out}'

## Rules to target Cellprofiler batch runs
define_cellprofiler_rules(config_dict_cp, fol_path_base, container_cp=cellprofiler_container)
define_ilastik_rules(config_dict_ilastik, fol_path_base, threads=ilastik_threads,
                     mem_mb=ilastik_mem_mb, container_ilastik=ilastik_container)

### Varia

rule clean:
    shell:
        "rm -R {fol_path_base}"

rule download_example_data:
    run:
        fol_example.mkdir(parents=True, exist_ok=True)
        for fn, url in config['example_data_urls']:
            fn = fol_example / fn
            if ~fn.exists():
                urllib.request.urlretrieve(url, fn)
