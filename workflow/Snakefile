import urllib.request
import pathlib
from scripts import helpers as hpr
from snakemake.utils import validate

# Cellprofiler/Ilastik rules
include: 'rules/cellprofiler.smk'
include: 'rules/ilastik.smk'

# Read Configuration
configfile: 'config/config_pipeline.yml'
validate(config, "schemas/config_pipeline.schema.yml")

# Extract variables from configuration
## Input/output
input_data_folders = config['input_data_folders']
input_file_regexp = config['input_file_regexp']
fn_cell_classifier = config['fn_cell_classifier']

# Optional example data folder
fol_example = pathlib.Path(input_data_folders[0])

## Panel
csv_panel = config['csv_panel']
csv_panel_metal = config['csv_panel_metal']
csv_panel_ilastik = config['csv_panel_ilastik']
csv_panel_full = config['csv_panel_full']

## Ilastik run config
ilastik_container = config['ilastik_container']
ilastik_threads = config['ilastik_threads']
ilastik_mem_mb = config['ilastik_mem_mb']

# varia
img_minsize = config['min_image_size']
# Cellprofiler default config
cellprofiler_container = config['cellprofiler_container']
cp_plugins = config['cellprofiler_plugins']
# Define hardcoded variables
## Define basic folder structrue
folder_base = pathlib.Path('results')
folder_analysis = folder_base / 'tiffs'
folder_full = folder_analysis / 'full'
folder_ilastik = folder_analysis / 'ilastik'
folder_ilastik_h5 = folder_analysis / 'ilastik_h5'
folder_probabilities = folder_analysis / 'probabilities'
folder_cellmasks = folder_analysis / 'cellmasks'
folder_ome = folder_base / 'ometiff'
folder_tmp = folder_base / 'tmp'
folder_cp = folder_base / 'cpout'
folder_histocat = folder_base / 'histocat'
folder_uncertainty = folder_base / 'uncertainty'
folder_crop = folder_base / 'ilastik_training_data'
folder_classifiers = folder_base / 'classifiers'

folder_cp_masks = folder_cp / 'masks'

## Define Output files
fn_image = folder_cp / 'Image.csv'
fn_cell = folder_cp / 'cell.csv'
fn_experiment = folder_cp / 'Experiment.csv'
fn_object_rel = folder_cp / 'Object relationships.csv'
fn_cell_class_ut = folder_classifiers / 'cell_untrained.ilp'
fn_acmeta = folder_cp / 'acquisition_metadata.csv'
# Identify a dictionary of input folders/zips containing .mcd files to process
dict_zip_fns = {fn.stem: fn for fn in hpr.get_filenames_by_re(input_data_folders, input_file_regexp)}
# Produce a list of all cellprofiler output files
cp_measurements_output = [fn_image, fn_cell, fn_experiment, fn_object_rel]


## Define suffixes
suffix_full = '_full'
suffix_ilastik = '_ilastik'
suffix_scale = '_s2'
suffix_mask = '_mask'
suffix_probablities = '_Probabilities'
suffix_tiff = '.tiff'
suffix_csv = '.csv'
suffix_h5 = '.h5'
suffix_done = '.done'
suffix_crop = '_{crop, x[0-9]+_y[0-9]+_w[0-9]+_h[0-9]+}'

## Define derived file patterns
pat_fn_zip = folder_base / 'zips' / ('{zipfol}' + '.zip')
pat_fn_mcdparse_done = folder_base / 'zips' / ('{zipfol}' + suffix_done)
fn_all_mcd_converted = folder_base / 'all_mcd_converted.done'

## Init dirs
folder_ome.mkdir(parents=True, exist_ok=True)

# Configuration for cellprofiler pipeline steps
# (Please look at rules/cellprofiler.smk for the documentation of this structure)
config_dict_cp = {
    'prepilastik': {
        'run_size': 10,
        'plugins': cp_plugins,
        'pipeline': 'resources/cp3_pipelines/1_prepare_ilastik.cppipe',
        'input_files': [folder_ilastik],
        'output_patterns': {'scaled': directory(folder_ilastik_h5),
                            'crops': directory(folder_crop)}
    },
    'segmasks': {
        'run_size': 10,
        'plugins': cp_plugins,
        'pipeline': 'resources/cp3_pipelines/2_segment_ilastik.cppipe',
        'input_files': [folder_probabilities],
        'output_patterns': {'.': directory(folder_cellmasks)}
    },
    'measuremasks': {
        'run_size': 5,
        'plugins': cp_plugins,
        'pipeline': 'resources/cp3_pipelines/3_measure_mask_basic.cppipe',
        'input_files': [folder_cellmasks, folder_full, folder_probabilities],
        'output_patterns': {'.': cp_measurements_output,
                            'cellmasks': directory(folder_cp_masks)}
    }
}

# Configuration for Ilastik steps
# (Please look at rules/cellprofiler.smk for the documentation of this structure)
config_dict_ilastik = {
    'cell':
        {'project': fn_cell_classifier,
         'run_size': 10,
         'output_format': 'tiff',
         'output_filename': f'{{nickname}}{suffix_probablities}{suffix_tiff}',
         'export_source': 'Probabilities',
         'export_dtype': 'uint16',
         'pipeline_result_drange': '"(0.0, 1.0)"',
         'input_files': folder_ilastik_h5,
         'output_pattern': directory(folder_probabilities)
         }
}
# Target rules
rule all:
    input: folder_ome, folder_cp_masks, cp_measurements_output

rule cell_probabilities:
    input: folder_probabilities

rule prep_cell_classifier:
    input: folder_crop

rule files_ilastik_scaled:
    input: folder_ilastik_h5

rule files_ilastik:
    input: folder_ilastik

rule files_ome:
    input: folder_ome


# MCD to ome conversion
def get_zip_fn(wildcards):
    return dict_zip_fns[wildcards.zipfol]

rule retrieve_zip:
    output: pat_fn_zip
    params:
          fn = get_zip_fn
    shell:
         'cp {params.fn} {output[0]}'

# MCD to ome conversion
rule mcdfolder2imcfolder:
    input:
         fn_zip = pat_fn_zip
    output: touch(pat_fn_mcdparse_done)
    threads: 1
    params:
          fol_ome = folder_ome
    container:
          'docker://votti/imctools2:next'
    script:
          'scripts/convert_imcfolder.py'

checkpoint all_mcd_converted:
    input: expand(str(pat_fn_mcdparse_done), zipfol=dict_zip_fns.keys())
    output:
          touch(fn_all_mcd_converted)


# OME to analysis tiff conversion
rule ome2full:
    input:
         fol_ome = folder_ome,
         panel = csv_panel,
         done = fn_all_mcd_converted
    params:
          column_used = 'full',
          column_metal = csv_panel_metal,
          suffix = suffix_full,
          min_imgsize = img_minsize
    output:
          directory(folder_full)
    threads: 32
    container:
          'docker://votti/imctools2:next'
    script:
          'scripts/imc2analysis.py'

rule ome2ilastik:
    input:
         fol_ome = folder_ome,
         panel = csv_panel,
         done = fn_all_mcd_converted
    output:
          directory(folder_ilastik)
    container:
          'docker://votti/imctools2:next'
    params:
          column_used = 'ilastik',
          column_metal = csv_panel_metal,
          suffix = suffix_ilastik,
          min_imgsize = img_minsize
    threads: 32
    script:
          'scripts/imc2analysis.py'

# rule
rule exportacmeta:
    input:
        folder_ome = folder_ome,
        all_converted = fn_all_mcd_converted
    output: fn_acmeta
    params:
        folder_out = str(fn_acmeta.parent)
    container:
        'docker://votti/imctools2:next'
    shell:
        ' imctools export-acquisition-csv {input.folder_ome} {params.folder_out}'

## Rules to target Cellprofiler batch runs
define_cellprofiler_rules(config_dict_cp, folder_base, container_cp=cellprofiler_container)
define_ilastik_rules(config_dict_ilastik, folder_base, threads=ilastik_threads,
                     mem_mb=ilastik_mem_mb, container_ilastik=ilastik_container)

### Varia

rule clean:
    shell:
        "rm -R {folder_base}"

rule download_example_data:
    run:
        fol_example.mkdir(parents=True, exist_ok=True)
        for fn, url in config['example_data_urls']:
            fn = fol_example / fn
            if ~fn.exists():
                urllib.request.urlretrieve(url, fn)
